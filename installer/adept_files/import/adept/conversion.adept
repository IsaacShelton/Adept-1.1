
// -=-=- Adept Conversion "adept/conversion.adept" -=-=-
// Provides basic conversion functions for primitive types

private import "system/io.adept"
private import "system/string.adept"
private import "system/system.adept"
private import "system/conversion.adept"
private foreign pow(double, double) double
private foreign powf(float, float) float

public def byteToString(number byte, output *ubyte, base int) *ubyte {
	i int = 0
	is_negative bool = false
	
	if number == 0sb {
		strcpy(output, "0")
		return output
	}
	
	if number < 0sb and base == 10 {
		is_negative = true
		number *= -1sb
	}

	while number != 0sb {
		remainder ubyte = cast ubyte(cast int(number) % base)
		
		if remainder > 9ub {
			output[i] = remainder + 87ub
		} else {
			output[i] = remainder + 48ub
			i += 1
		}
		
		number /= cast byte(base)
	}
	
	if is_negative {
		output[i] = 45ub
		i += 1
	}
	
	output[i] = 0ub
	reverse(output, i)
	return output
}

public def shortToString(number short, output *ubyte, base int) *ubyte {
	i int = 0
	is_negative bool = false
	
	if number == 0ss {
		strcpy(output, "0")
		return output
	}
	
	if number < 0ss and base == 10 {
		is_negative = true
		number *= -1ss
	}

	while number != 0ss {
		remainder ubyte = cast ubyte(cast int(number) % base)
		
		if remainder > 9ub {
			output[i] = remainder + 87ub
		} else {
			output[i] = remainder + 48ub
			i += 1
		}
		
		number /= cast short(base)
	}
	
	if is_negative {
		output[i] = 45ub
		i += 1
	}
	
	output[i] = 0ub
	reverse(output, i)
	return output
}

public def intToString(number int, output *ubyte, base int) *ubyte {
	i int = 0
	is_negative bool = false
	
	if number == 0si {
		strcpy(output, "0")
		return output
	}

	if number < 0si and base == 10 {
		is_negative = true
		number *= -1si
	}
	
	while number != 0 {
		remainder ubyte = cast ubyte(number % base)
		
		if remainder > 9ub {
			output[i] = remainder + 87ub
			i += 1
		} else {
			output[i] = remainder + 48ub
			i += 1
		}

		number /= base
	}
	
	if is_negative {
		output[i] = 45ub
		i += 1
	}
	
	output[i] = 0ub
	reverse(output, i)
	return output
}

public def longToString(number long, output *ubyte, base int) *ubyte {
	i int = 0
	is_negative bool = false

	if number == 0sl {
		strcpy(output, "0")
		return output
	}
	
	if number < 0sl and base == 10 {
		is_negative = true
		number *= -1sl
	}

	while number != 0sl {
		remainder ubyte = cast ubyte(number % cast long base)
		
		if remainder > 9ub {
			output[i] = remainder + 87ub
		} else {
			output[i] = remainder + 48ub
			i += 1
		}
		
		number /= cast long base
	}
	
	if is_negative {
		output[i] = 45ub
		i += 1
	}
	
	output[i] = 0ub
	reverse(output, i)
	return output
}

public def boolToString(boolean bool, output *ubyte) *ubyte {
	if boolean {
		strcpy(output, "true")
		return output
	} else {
		strcpy(output, "false")
		return output
	}
}

public def floatToString(fp float, output *ubyte, after_point int) *ubyte {
	integer int = cast int(fp)
	floating float = fp - cast float(integer)

	i int = intToStringFixed(integer, output, 0)

	if after_point != 0 {
		output[i] = 46ub
		floating = floating * powf(10.0f, cast float(after_point))
		intToStringFixed(cast int(floating), output + cast ptr(i + 1), after_point)
	}
	
	return output
}

public def doubleToString(fp double, output *ubyte, after_point int) *ubyte {
	integer int = cast int(fp)
	floating double = fp - cast double(integer)

	i int = intToStringFixed(integer, output, 0)

	if after_point != 0 {
		output[i] = 46ub
		floating = floating * pow(10.0, cast double(after_point))
		intToStringFixed(cast int(floating), output + cast ptr(i + 1), after_point)
	}
	
	return output
}

public def stringToByte(raw *ubyte) byte {
	return cast byte(atoi(raw))
}

public def stringToShort(raw *ubyte) short {
	return cast short(atoi(raw))
}

public def stringToInt(raw *ubyte) int {
	return atoi(raw)
}

public def stringToLong(raw *ubyte) long {
	return atol(raw)
}

public def stringToFloat(raw *ubyte) float {
	return cast float atof(raw)
}

public def stringToDouble(raw *ubyte) double {
	return atof(raw)
}

private def reverse(raw *ubyte, length int) void {
	start int = 0
	end int = length - 1
	
	while start < end {
		tmp ubyte = raw[start]
		raw[start] = raw[end]
		raw[end] = tmp
		
		start += 1
		end -= 1
	}
}

private def intToStringFixed(integer int, destination *ubyte, digits int) int {
	i int = 0
	is_negative bool = false
	
	if integer < 0 {
		is_negative = true
		integer *= -1
	}
	
	if integer != 0 {
		while integer != 0 {
			destination[i] = cast ubyte(integer % 10) + 48ub
			integer /= 10
			i += 1
		}
	} else {
		destination[i] = 48ub
		i += 1
	}
	
	while i < digits {
		destination[i] = 48ub
		i += 1
	}
	
	if(is_negative){
		destination[i] = 45ub
		i += 1
	}

	reverse(destination, i)
	destination[i] = 0ub
	return i
}
